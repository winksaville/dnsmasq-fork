# Configuration for the dhcp server that uses Network Namespaces (NNS)
# created in ./nns.setup.sh with ns1/veth1 & ns2/veth2. Then dnsmasq is
# started using ./nns.dnsmask.sh and veth2 requests a DHCP address using
# ./nns.dhclient.sh. For flexibility, the interface is passed on the
# commandline in ./nns.dnsmasq.sh.
#
# Note: As we have to use `sudo` to execute dnsmasq NNS the .lease and
# .log files end up with user/group set to root/root or nobody/root.
# This is inconvenient but seems the easiest thing to do. An alternate
# is to change capabilities for ip and src/dnsmasq but that seems
# potentially dangerous.

#interface=veth1 # set interface via command line for flexibility
dhcp-range=192.168.1.50,192.168.1.60,2m

# Debugging
dhcp-leasefile=./wink.dnsmasq.leases
no-daemon

# Log to a file
log-facility=./wink.dnsmasq.log

# Debug
log-debug

# Log DNS queries
log-queries

# Log DHCP transacyions
log-dhcp

# Create two dhcp-option's with tag:defaultoptions but each with differents options,
# option:router and option:dns-server. I first thought this would be like an assignment
# statement and option:dns-server would replace option:router. But instead we end up
# with 2 options with the same tag and when we use `set:defaultoptions` in dhcp-host
# both options are sent in the DHCP response. This technique was provided by
# chat-gpt4: https://chat.openai.com/share/cadee80b-4e3e-41e1-b95e-5fd62e799a9a
dhcp-option=tag:defaultoptions,option:router,192.168.1.6
dhcp-option=tag:defaultoptions,option:dns-server,9.9.9.9

# This fails with "wink: parse_dhcp_opt:- [rv=0] error errstr=bad IP address arg=option:router flags=0"
#dhcp-option=tag:defaultoptions,option:router,192.168.1.6,option:dns-server,9.9.9.9

# veth2 receives both option:router and option:dns-server in its DHCP response.
dhcp-host=ee:28:c5:71:ec:97,set:defaultoptions

